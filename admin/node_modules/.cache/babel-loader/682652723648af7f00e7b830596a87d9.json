{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearnFullstack\\\\admin\\\\src\\\\component\\\\Chat\\\\Chat.js\";\nimport React, { Component } from \"react\";\nimport \"./Chat.css\";\nimport io from \"socket.io-client\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.socket = io(`localhost:9000/`, {\n      transports: [\"websocket\", \"polling\", \"flashsocket\"]\n    });\n  }\n\n  componentDidMount() {\n    this.socket.emit(\"join_rom\", 304);\n    this.socket.on(\"message_hi\", data => {\n      console.log(data);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CHAT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    fb: state.fb,\n    messAll: state.messAll\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAllFeedback: () => {\n      dispatch(actions.getAllFeedback());\n    },\n    sendMessage: obj => {\n      dispatch(actions.sendMessage(obj));\n    },\n    addLoading: () => {\n      dispatch(actionsUser.addLoading());\n    },\n    removeLoading: () => {\n      dispatch(actionsUser.removeLoading());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":{"version":3,"sources":["D:/LearnFullstack/admin/src/component/Chat/Chat.js"],"names":["React","Component","io","connect","Chat","constructor","props","socket","transports","componentDidMount","emit","on","data","console","log","render","mapStateToProps","state","fb","messAll","mapDispatchToProps","dispatch","getAllFeedback","actions","sendMessage","obj","addLoading","actionsUser","removeLoading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AACA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAC3BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcL,EAAE,CAAE,iBAAF,EAAoB;AAClCM,MAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd,EAAyB,aAAzB;AADsB,KAApB,CAAhB;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,MAAL,CAAYG,IAAZ,CAAiB,UAAjB,EAA6B,GAA7B;AACA,SAAKH,MAAL,CAAYI,EAAZ,CAAe,YAAf,EAA8BC,IAAD,IAAU;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAFD;AAGD;;AACDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAnB0B;;AAqB7B,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,EAAE,EAAED,KAAK,CAACC,EADL;AAELC,IAAAA,OAAO,EAAEF,KAAK,CAACE;AAFV,GAAP;AAID,CALD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,cAAc,EAAE,MAAM;AACpBD,MAAAA,QAAQ,CAACE,OAAO,CAACD,cAAR,EAAD,CAAR;AACD,KAHI;AAILE,IAAAA,WAAW,EAAGC,GAAD,IAAS;AACpBJ,MAAAA,QAAQ,CAACE,OAAO,CAACC,WAAR,CAAoBC,GAApB,CAAD,CAAR;AACD,KANI;AAOLC,IAAAA,UAAU,EAAE,MAAM;AAChBL,MAAAA,QAAQ,CAACM,WAAW,CAACD,UAAZ,EAAD,CAAR;AACD,KATI;AAULE,IAAAA,aAAa,EAAE,MAAM;AACnBP,MAAAA,QAAQ,CAACM,WAAW,CAACC,aAAZ,EAAD,CAAR;AACD;AAZI,GAAP;AAcD,CAfD;;AAgBA,eAAezB,OAAO,CAACa,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChB,IAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Chat.css\";\r\nimport io from \"socket.io-client\";\r\nimport { connect } from \"react-redux\";\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.socket.emit(\"join_rom\", 304);\r\n    this.socket.on(\"message_hi\", (data) => {\r\n      console.log(data);\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>CHAT</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    fb: state.fb,\r\n    messAll: state.messAll,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllFeedback: () => {\r\n      dispatch(actions.getAllFeedback());\r\n    },\r\n    sendMessage: (obj) => {\r\n      dispatch(actions.sendMessage(obj));\r\n    },\r\n    addLoading: () => {\r\n      dispatch(actionsUser.addLoading());\r\n    },\r\n    removeLoading: () => {\r\n      dispatch(actionsUser.removeLoading());\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}
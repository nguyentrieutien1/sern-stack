{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearnFullstack\\\\admin\\\\src\\\\component\\\\Chat\\\\Chat.js\";\nimport React, { Component } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\";\nimport actions from \"./../../actions/userActions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.hanleOnClick = e => {\n      e.preventDefault();\n      this.socket.emit(\"send_mess\", {\n        mess: this.state.message,\n        id: this.state.id\n      });\n    };\n\n    this.handleRepMess = id => {\n      this.props.handleRepMess(id);\n      setTimeout(() => {\n        let {\n          arr\n        } = this.state;\n        let findId = this.state.arr.findIndex(e => e.id === id);\n        arr[findId].active = false;\n        this.setState({\n          arr: arr\n        });\n      }, 300);\n    };\n\n    this.state = {\n      message: \"\",\n      arr: [],\n      isSeen: true,\n      idUser: 0,\n      message: \"\",\n      username: \"\"\n    };\n    this.socket = io(`localhost:9000/`, {\n      transports: [\"websocket\", \"polling\", \"flashsocket\"]\n    });\n  }\n\n  componentDidMount() {\n    this.props.getAllUser();\n    this.props.getAllMess();\n    let idUser = [];\n    this.props.listUser.forEach(element => {\n      idUser.push(element.id);\n    });\n    idUser.forEach(element => {\n      this.socket.emit(\"join_rom\", element);\n    });\n    setTimeout(() => {\n      let obj = {};\n      let arrObj = [];\n      this.props.chat.forEach((el, i) => {\n        let result = arrObj.findIndex(e => e.email === el.email);\n\n        if (result === -1) {\n          arrObj.push(el);\n        } else {\n          arrObj[result].email = el.email;\n          arrObj[result].message = el.message;\n          arrObj[result].id = el.id;\n          arrObj[result].image = el.image;\n          arrObj[result].active = el.active;\n        }\n      });\n      this.setState({\n        arr: arrObj\n      });\n    }, 300);\n    this.socket.on(\"message_hi\", message => {\n      let {\n        arr\n      } = this.state;\n      let findIndex = arr.findIndex(e => e.email === message.email);\n\n      if (findIndex === -1) {\n        arr.push(message);\n      } else {\n        arr[findIndex].username = message.username;\n        arr[findIndex].message = message.message;\n        arr[findIndex].id = message.id;\n        arr[findIndex].image = message.image;\n        arr[findIndex].active = true;\n      }\n\n      this.setState({\n        arr: arr\n      });\n    });\n    console.log(123);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contasiner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"MESSENGER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), this.state.arr.map(e => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => this.handleRepMess(e.id),\n            className: \"mess\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avt\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: e.image\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content-mess\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"username\",\n                  children: e.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: e.active ? `message isActive` : `message`,\n                  children: e.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: e.active ? `seen` : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__realtime\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"name\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"xxx\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            c: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    listUser: state.listUser,\n    chat: state.chat\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAllUser: () => {\n      dispatch(actions.getAllUser());\n    },\n    getAllMess: () => {\n      dispatch(actions.getAllMess());\n    },\n    handleRepMess: id => {\n      dispatch(actions.handleRepMess(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":{"version":3,"sources":["D:/LearnFullstack/admin/src/component/Chat/Chat.js"],"names":["React","Component","Button","DataGrid","connect","io","actions","CloseIcon","Chat","constructor","props","handleOnChange","e","setState","message","target","value","hanleOnClick","preventDefault","socket","emit","mess","state","id","handleRepMess","setTimeout","arr","findId","findIndex","active","isSeen","idUser","username","transports","componentDidMount","getAllUser","getAllMess","listUser","forEach","element","push","obj","arrObj","chat","el","i","result","email","image","on","console","log","render","map","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport actions from \"./../../actions/userActions\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport \"./Chat.css\";\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      arr: [],\r\n      isSeen: true,\r\n      idUser: 0,\r\n      message: \"\",\r\n      username: \"\",\r\n    };\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.getAllUser();\r\n    this.props.getAllMess();\r\n    let idUser = [];\r\n    this.props.listUser.forEach((element) => {\r\n      idUser.push(element.id);\r\n    });\r\n    idUser.forEach((element) => {\r\n      this.socket.emit(\"join_rom\", element);\r\n    });\r\n    setTimeout(() => {\r\n      let obj = {};\r\n      let arrObj = [];\r\n      this.props.chat.forEach((el, i) => {\r\n        let result = arrObj.findIndex((e) => e.email === el.email);\r\n        if (result === -1) {\r\n          arrObj.push(el);\r\n        } else {\r\n          arrObj[result].email = el.email;\r\n          arrObj[result].message = el.message;\r\n          arrObj[result].id = el.id;\r\n          arrObj[result].image = el.image;\r\n          arrObj[result].active = el.active;\r\n        }\r\n      });\r\n      this.setState({\r\n        arr: arrObj,\r\n      });\r\n    }, 300);\r\n    this.socket.on(\"message_hi\", (message) => {\r\n      let { arr } = this.state;\r\n      let findIndex = arr.findIndex((e) => e.email === message.email);\r\n      if (findIndex === -1) {\r\n        arr.push(message);\r\n      } else {\r\n        arr[findIndex].username = message.username;\r\n        arr[findIndex].message = message.message;\r\n        arr[findIndex].id = message.id;\r\n        arr[findIndex].image = message.image;\r\n        arr[findIndex].active = true;\r\n      }\r\n      this.setState({\r\n        arr: arr,\r\n      });\r\n    });\r\n    console.log(123);\r\n  }\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      message: e.target.value,\r\n    });\r\n  };\r\n  hanleOnClick = (e) => {\r\n    e.preventDefault();\r\n    this.socket.emit(\"send_mess\", {\r\n      mess: this.state.message,\r\n      id: this.state.id,\r\n    });\r\n  };\r\n  handleRepMess = (id) => {\r\n    this.props.handleRepMess(id);\r\n    setTimeout(() => {\r\n      let { arr } = this.state;\r\n      let findId = this.state.arr.findIndex((e) => e.id === id);\r\n      arr[findId].active = false;\r\n      this.setState({\r\n        arr: arr,\r\n      });\r\n    }, 300);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"contasiner\">\r\n        <div className=\"form__chat\">\r\n          <h1>MESSENGER</h1>\r\n          {this.state.arr.map((e) => {\r\n            return (\r\n              <div onClick={() => this.handleRepMess(e.id)} className=\"mess\">\r\n                <div className=\"avt\">\r\n                  <img src={e.image} />\r\n                </div>\r\n                <div className=\"content\">\r\n                  <div className=\"content-mess\">\r\n                    <h2 className=\"username\">{e.username}</h2>\r\n                    <span className={e.active ? `message isActive` : `message`}>\r\n                      {e.message}\r\n                    </span>\r\n                  </div>\r\n                  <div className={e.active ? `seen` : \"\"}></div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"data\">\r\n          <div className=\"chat__realtime\">\r\n            <div className=\"info\">\r\n              <div className=\"img\">\r\n                <img />\r\n              </div>\r\n              <div className=\"name\">\r\n                <h3>xxx</h3>\r\n              </div>\r\n            </div>\r\n            <div c></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return { listUser: state.listUser, chat: state.chat };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllUser: () => {\r\n      dispatch(actions.getAllUser());\r\n    },\r\n    getAllMess: () => {\r\n      dispatch(actions.getAllMess());\r\n    },\r\n    handleRepMess: (id) => {\r\n      dispatch(actions.handleRepMess(id));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}
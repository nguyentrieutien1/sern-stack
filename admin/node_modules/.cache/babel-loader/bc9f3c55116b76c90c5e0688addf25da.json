{"ast":null,"code":"var _jsxFileName = \"D:\\\\LearnFullstack\\\\admin\\\\src\\\\component\\\\Chat\\\\Chat.js\";\nimport React, { Component } from \"react\";\nimport { TextField, Button } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\";\nimport actions from \"./../../actions/userActions\";\nimport axios from \"axios\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnChange = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n\n    this.hanleOnClick = e => {\n      e.preventDefault();\n      this.socket.emit(\"send_mess\", {\n        mess: this.state.message,\n        id: this.state.id\n      });\n    };\n\n    this.state = {\n      message: \"\",\n      id: 0,\n      arr: []\n    };\n    this.socket = io(`localhost:9000/`, {\n      transports: [\"websocket\", \"polling\", \"flashsocket\"]\n    });\n  }\n\n  componentDidMount() {\n    this.props.getAllUser();\n    this.props.getAllMess();\n    let idUser = [];\n    this.props.listUser.forEach(element => {\n      idUser.push(element.id);\n    });\n    idUser.forEach(element => {\n      this.socket.emit(\"join_rom\", element);\n    });\n    setTimeout(() => {\n      let obj = {};\n      let arrObj = [];\n      this.props.chat.forEach((el, i) => {\n        let result = arrObj.findIndex(e => e.email === el.email);\n\n        if (result === -1) {\n          arrObj.push(el);\n        } else {\n          arrObj[result].email = el.email;\n          arrObj[result].message = el.mess;\n          arrObj[result].id = el.id;\n        }\n      });\n      this.setState({\n        arr: arrObj\n      });\n    }, 300);\n    this.socket.on(\"message_hi\", message => {\n      console.log(message);\n      let {\n        arr\n      } = this.state;\n      let findIndex = arr.findIndex(e => e.email === message.email);\n\n      if (findIndex === -1) {\n        arr.push(message);\n        console.log(message);\n      } else {\n        console.log(message);\n        arr[findIndex].username = message.username;\n        arr[findIndex].message = message.message;\n        arr[findIndex].id = message.id;\n      }\n\n      this.setState({\n        arr: arr\n      });\n    });\n  }\n\n  render() {\n    console.log(this.props.chat);\n    const rows = [...this.props.listUser];\n    const columns = [{\n      field: \"id\",\n      headerName: \"ID\",\n      width: 70,\n      headerAlign: \"center\"\n    }, {\n      field: \"username\",\n      headerName: \"Username\",\n      width: 100\n    }, {\n      field: \"email\",\n      headerName: \"Email\",\n      width: 200\n    }, {\n      field: \"role\",\n      headerName: \"Role\",\n      width: 100\n    }, {\n      field: \"password\",\n      headerName: \"Password\",\n      width: 100\n    }, {\n      field: \"address\",\n      headerName: \"Address\",\n      width: 100,\n      type: \"text\"\n    }, {\n      field: \"numberphone\",\n      headerName: \"Number Phone\",\n      width: 100,\n      type: \"text\"\n    }, {\n      field: \"button\",\n      headerName: \"Action\",\n      width: 200,\n      renderCell: cellValues => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"edit\",\n            variant: \"contained\",\n            color: \"success\",\n            onClick: () => this.joinRoom(cellValues),\n            children: \"SEND MESSAGE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      },\n      headerAlign: \"center\"\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contasiner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"MESSENGER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), this.state.arr.map(e => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mess\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: e.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: e.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data\",\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          pageSize: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    listUser: state.listUser,\n    chat: state.chat\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAllUser: () => {\n      dispatch(actions.getAllUser());\n    },\n    getAllMess: () => {\n      dispatch(actions.getAllMess());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":{"version":3,"sources":["D:/LearnFullstack/admin/src/component/Chat/Chat.js"],"names":["React","Component","TextField","Button","DataGrid","connect","io","actions","axios","Chat","constructor","props","handleOnChange","e","setState","message","target","value","hanleOnClick","preventDefault","socket","emit","mess","state","id","arr","transports","componentDidMount","getAllUser","getAllMess","idUser","listUser","forEach","element","push","setTimeout","obj","arrObj","chat","el","i","result","findIndex","email","on","console","log","username","render","rows","columns","field","headerName","width","headerAlign","type","renderCell","cellValues","joinRoom","map","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { TextField, Button } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport actions from \"./../../actions/userActions\";\r\nimport axios from \"axios\";\r\nimport \"./Chat.css\";\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      id: 0,\r\n      arr: [],\r\n    };\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.getAllUser();\r\n    this.props.getAllMess();\r\n    let idUser = [];\r\n    this.props.listUser.forEach((element) => {\r\n      idUser.push(element.id);\r\n    });\r\n    idUser.forEach((element) => {\r\n      this.socket.emit(\"join_rom\", element);\r\n    });\r\n    setTimeout(() => {\r\n      let obj = {};\r\n      let arrObj = [];\r\n      this.props.chat.forEach((el, i) => {\r\n        let result = arrObj.findIndex((e) => e.email === el.email);\r\n        if (result === -1) {\r\n          arrObj.push(el);\r\n        } else {\r\n          arrObj[result].email = el.email;\r\n          arrObj[result].message = el.mess;\r\n          arrObj[result].id = el.id;\r\n        }\r\n      });\r\n      this.setState({\r\n        arr: arrObj,\r\n      });\r\n    }, 300);\r\n    this.socket.on(\"message_hi\", (message) => {\r\n      console.log(message);\r\n\r\n      let { arr } = this.state;\r\n      let findIndex = arr.findIndex((e) => e.email === message.email);\r\n      if (findIndex === -1) {\r\n        arr.push(message);\r\n\r\n        console.log(message);\r\n      } else {\r\n        console.log(message);\r\n\r\n        arr[findIndex].username = message.username;\r\n        arr[findIndex].message = message.message;\r\n        arr[findIndex].id = message.id;\r\n      }\r\n      this.setState({\r\n        arr: arr,\r\n      });\r\n    });\r\n  }\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      message: e.target.value,\r\n    });\r\n  };\r\n  hanleOnClick = (e) => {\r\n    e.preventDefault();\r\n    this.socket.emit(\"send_mess\", {\r\n      mess: this.state.message,\r\n      id: this.state.id,\r\n    });\r\n  };\r\n  render() {\r\n    console.log(this.props.chat);\r\n    const rows = [...this.props.listUser];\r\n    const columns = [\r\n      { field: \"id\", headerName: \"ID\", width: 70, headerAlign: \"center\" },\r\n      {\r\n        field: \"username\",\r\n        headerName: \"Username\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"email\",\r\n        headerName: \"Email\",\r\n        width: 200,\r\n      },\r\n      {\r\n        field: \"role\",\r\n        headerName: \"Role\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"password\",\r\n        headerName: \"Password\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"address\",\r\n        headerName: \"Address\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"numberphone\",\r\n        headerName: \"Number Phone\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"button\",\r\n        headerName: \"Action\",\r\n        width: 200,\r\n\r\n        renderCell: (cellValues) => {\r\n          return (\r\n            <>\r\n              <Button\r\n                className=\"edit\"\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n                onClick={() => this.joinRoom(cellValues)}\r\n              >\r\n                SEND MESSAGE\r\n              </Button>\r\n            </>\r\n          );\r\n        },\r\n        headerAlign: \"center\",\r\n      },\r\n    ];\r\n    return (\r\n      <div className=\"contasiner\">\r\n        <div className=\"form__chat\">\r\n          <h1>MESSENGER</h1>\r\n          {this.state.arr.map((e) => {\r\n            return (\r\n              <div className=\"mess\">\r\n                <span>{e.username}</span>\r\n                <h4>{e.message}</h4>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"data\">\r\n          <DataGrid rows={rows} columns={columns} pageSize={4} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return { listUser: state.listUser, chat: state.chat };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllUser: () => {\r\n      dispatch(actions.getAllUser());\r\n    },\r\n    getAllMess: () => {\r\n      dispatch(actions.getAllMess());\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n"]},"metadata":{},"sourceType":"module"}
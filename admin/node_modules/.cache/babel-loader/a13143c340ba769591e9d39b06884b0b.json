{"ast":null,"code":"import types from \"./../types/typeOfActions\";\nimport callApi from \"./../callApi/callApi\";\n\nclass User {\n  constructor() {\n    this.getAllUser = () => {\n      return async dispatch => {\n        let userList = await callApi(`http://localhost:9000/get-user`, `GET`);\n        return dispatch({\n          type: types.GET_ALL_USER,\n          payload: userList.userList\n        });\n      };\n    };\n\n    this.deleteUser = id => {\n      return async dispatch => {\n        let result = await callApi(`http://localhost:9000/user/${id}`, `DELETE`);\n        dispatch({\n          type: types.MESSAGE_USER,\n          payload: result\n        });\n      };\n    };\n\n    this.createNewUser = obj => {\n      return async dispatch => {\n        let result = await callApi(`http://localhost:9000/register`, `POST`, obj);\n        dispatch({\n          type: types.MESSAGE_USER,\n          payload: result\n        });\n      };\n    };\n\n    this.handleUpdateUser = obj => {\n      return async dispatch => {\n        let result = await callApi(`http://localhost:9000/user/${obj.id}`, `PUT`, obj);\n        dispatch({\n          type: types.MESSAGE_USER,\n          payload: result\n        });\n      };\n    };\n\n    this.getHotCustomer = () => {\n      return async dispatch => {\n        let result = await callApi(`http://localhost:9000/query`, `GET`);\n        let arr = result.result[0];\n        console.log(arr);\n        let count = 0;\n        let countUser = 0;\n        let sum = 0;\n\n        for (let i = 0; i < arr.length; ++i) {\n          count++;\n\n          if (arr[i].id === arr[count].id) {\n            console.log(arr[i].id);\n          } else {\n            callA;\n            console.log(arr[count].id);\n          }\n        }\n      };\n    };\n  }\n\n}\n\nexport default new User();","map":{"version":3,"sources":["D:/LearnFullstack/admin/src/actions/userActions.js"],"names":["types","callApi","User","getAllUser","dispatch","userList","type","GET_ALL_USER","payload","deleteUser","id","result","MESSAGE_USER","createNewUser","obj","handleUpdateUser","getHotCustomer","arr","console","log","count","countUser","sum","i","length","callA"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AACA,MAAMC,IAAN,CAAW;AAAA;AAAA,SACTC,UADS,GACI,MAAM;AACjB,aAAO,MAAOC,QAAP,IAAoB;AACzB,YAAIC,QAAQ,GAAG,MAAMJ,OAAO,CAAE,gCAAF,EAAoC,KAApC,CAA5B;AACA,eAAOG,QAAQ,CAAC;AACdE,UAAAA,IAAI,EAAEN,KAAK,CAACO,YADE;AAEdC,UAAAA,OAAO,EAAEH,QAAQ,CAACA;AAFJ,SAAD,CAAf;AAID,OAND;AAOD,KATQ;;AAAA,SAUTI,UAVS,GAUKC,EAAD,IAAQ;AACnB,aAAO,MAAON,QAAP,IAAoB;AACzB,YAAIO,MAAM,GAAG,MAAMV,OAAO,CAAE,8BAA6BS,EAAG,EAAlC,EAAsC,QAAtC,CAA1B;AACAN,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEN,KAAK,CAACY,YADL;AAEPJ,UAAAA,OAAO,EAAEG;AAFF,SAAD,CAAR;AAID,OAND;AAOD,KAlBQ;;AAAA,SAmBTE,aAnBS,GAmBQC,GAAD,IAAS;AACvB,aAAO,MAAOV,QAAP,IAAoB;AACzB,YAAIO,MAAM,GAAG,MAAMV,OAAO,CAAE,gCAAF,EAAoC,MAApC,EAA2Ca,GAA3C,CAA1B;AACAV,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEN,KAAK,CAACY,YADL;AAEPJ,UAAAA,OAAO,EAAEG;AAFF,SAAD,CAAR;AAID,OAND;AAOD,KA3BQ;;AAAA,SA4BTI,gBA5BS,GA4BWD,GAAD,IAAS;AAC1B,aAAO,MAAOV,QAAP,IAAoB;AACzB,YAAIO,MAAM,GAAG,MAAMV,OAAO,CACvB,8BAA6Ba,GAAG,CAACJ,EAAG,EADb,EAEvB,KAFuB,EAGxBI,GAHwB,CAA1B;AAKAV,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEN,KAAK,CAACY,YADL;AAEPJ,UAAAA,OAAO,EAAEG;AAFF,SAAD,CAAR;AAID,OAVD;AAWD,KAxCQ;;AAAA,SAyCTK,cAzCS,GAyCQ,MAAM;AACrB,aAAO,MAAOZ,QAAP,IAAoB;AACzB,YAAIO,MAAM,GAAG,MAAMV,OAAO,CAAE,6BAAF,EAAiC,KAAjC,CAA1B;AACA,YAAIgB,GAAG,GAAGN,MAAM,CAACA,MAAP,CAAc,CAAd,CAAV;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAIG,KAAK,GAAG,CAAZ;AACA,YAAIC,SAAS,GAAG,CAAhB;AACA,YAAIC,GAAG,GAAG,CAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnCH,UAAAA,KAAK;;AACL,cAAIH,GAAG,CAACM,CAAD,CAAH,CAAOb,EAAP,KAAcO,GAAG,CAACG,KAAD,CAAH,CAAWV,EAA7B,EAAiC;AAC/BQ,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACM,CAAD,CAAH,CAAOb,EAAnB;AACD,WAFD,MAEO;AAACe,YAAAA,KAAK;AACXP,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,KAAD,CAAH,CAAWV,EAAvB;AACD;AACF;AACF,OAfD;AAgBD,KA1DQ;AAAA;;AAAA;;AA4DX,eAAe,IAAIR,IAAJ,EAAf","sourcesContent":["import types from \"./../types/typeOfActions\";\r\nimport callApi from \"./../callApi/callApi\";\r\nclass User {\r\n  getAllUser = () => {\r\n    return async (dispatch) => {\r\n      let userList = await callApi(`http://localhost:9000/get-user`, `GET`);\r\n      return dispatch({\r\n        type: types.GET_ALL_USER,\r\n        payload: userList.userList,\r\n      });\r\n    };\r\n  };\r\n  deleteUser = (id) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/user/${id}`, `DELETE`);\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  createNewUser = (obj) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/register`, `POST`, obj);\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  handleUpdateUser = (obj) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(\r\n        `http://localhost:9000/user/${obj.id}`,\r\n        `PUT`,\r\n        obj\r\n      );\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  getHotCustomer = () => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/query`, `GET`);\r\n      let arr = result.result[0];\r\n      console.log(arr);\r\n      let count = 0;\r\n      let countUser = 0;\r\n      let sum = 0;\r\n      for (let i = 0; i < arr.length; ++i) {\r\n        count++;\r\n        if (arr[i].id === arr[count].id) {\r\n          console.log(arr[i].id);\r\n        } else {callA\r\n          console.log(arr[count].id);\r\n        }\r\n      }\r\n    };\r\n  };\r\n}\r\nexport default new User();\r\n"]},"metadata":{},"sourceType":"module"}
[{"D:\\LearnFullstack\\admin\\src\\index.js":"1","D:\\LearnFullstack\\admin\\src\\reportWebVitals.js":"2","D:\\LearnFullstack\\admin\\src\\App.js":"3","D:\\LearnFullstack\\admin\\src\\reducers\\indexReducers.js":"4","D:\\LearnFullstack\\admin\\src\\reducers\\messageReducer.js":"5","D:\\LearnFullstack\\admin\\src\\reducers\\getAllUsers.js":"6","D:\\LearnFullstack\\admin\\src\\reducers\\getAllorders.js":"7","D:\\LearnFullstack\\admin\\src\\reducers\\getAllProducts.js":"8","D:\\LearnFullstack\\admin\\src\\containers\\TrangChuContainer.js":"9","D:\\LearnFullstack\\admin\\src\\containers\\QuanLyNguoiDungContainer.js":"10","D:\\LearnFullstack\\admin\\src\\reducers\\hotCustomerReducer.js":"11","D:\\LearnFullstack\\admin\\src\\containers\\QuanLySanPhamContainer.js":"12","D:\\LearnFullstack\\admin\\src\\containers\\OrderManageMentContainer.js":"13","D:\\LearnFullstack\\admin\\src\\component\\Header\\Header.js":"14","D:\\LearnFullstack\\admin\\src\\types\\typeOfActions.js":"15","D:\\LearnFullstack\\admin\\src\\actions\\ordersAction.js":"16","D:\\LearnFullstack\\admin\\src\\actions\\userActions.js":"17","D:\\LearnFullstack\\admin\\src\\component\\TrangChu\\TrangChu.js":"18","D:\\LearnFullstack\\admin\\src\\actions\\getAllProducts.js":"19","D:\\LearnFullstack\\admin\\src\\component\\QuanLyNguoiDung\\QuanLyNguoiDung.js":"20","D:\\LearnFullstack\\admin\\src\\component\\QuanLySanPham\\QuanLySanPham.js":"21","D:\\LearnFullstack\\admin\\src\\component\\QuanLyGioHang\\QuanLyGioHang.js":"22","D:\\LearnFullstack\\admin\\src\\callApi\\callApi.js":"23","D:\\LearnFullstack\\admin\\src\\component\\Chart\\Chart.js":"24","D:\\LearnFullstack\\admin\\src\\containers\\QuanLyPhanHoiContainer.js":"25","D:\\LearnFullstack\\admin\\src\\component\\QuanLyPhanHoi\\QuanLyPhanHoi.js":"26","D:\\LearnFullstack\\admin\\src\\actions\\getAllFeedback.js":"27","D:\\LearnFullstack\\admin\\src\\reducers\\getAllFeedbackReducer.js":"28","D:\\LearnFullstack\\admin\\src\\reducers\\messageAll.js":"29","D:\\LearnFullstack\\admin\\src\\component\\Loading\\Loading.js":"30","D:\\LearnFullstack\\admin\\src\\reducers\\loadingReducer.js":"31","D:\\LearnFullstack\\admin\\src\\reducers\\cancelProducts.js":"32","D:\\LearnFullstack\\admin\\src\\component\\Login\\Login.js":"33","D:\\LearnFullstack\\admin\\src\\component\\Chat\\Chat.js":"34","D:\\LearnFullstack\\admin\\src\\reducers\\chatReducer.js":"35"},{"size":1211,"mtime":1635325525244,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":2819,"mtime":1636475949045,"results":"39","hashOfConfig":"37"},{"size":630,"mtime":1636338849125,"results":"40","hashOfConfig":"37"},{"size":377,"mtime":1636083692466,"results":"41","hashOfConfig":"37"},{"size":350,"mtime":1635955523289,"results":"42","hashOfConfig":"37"},{"size":386,"mtime":1635426042236,"results":"43","hashOfConfig":"37"},{"size":506,"mtime":1635868619670,"results":"44","hashOfConfig":"37"},{"size":1019,"mtime":1636098279686,"results":"45","hashOfConfig":"37"},{"size":1839,"mtime":1635436618832,"results":"46","hashOfConfig":"37"},{"size":391,"mtime":1635344614713,"results":"47","hashOfConfig":"37"},{"size":2147,"mtime":1636098358867,"results":"48","hashOfConfig":"37"},{"size":1375,"mtime":1636468904030,"results":"49","hashOfConfig":"37"},{"size":3359,"mtime":1636278760163,"results":"50","hashOfConfig":"37"},{"size":498,"mtime":1636355698538,"results":"51","hashOfConfig":"37"},{"size":916,"mtime":1636098537827,"results":"52","hashOfConfig":"37"},{"size":2694,"mtime":1636468906534,"results":"53","hashOfConfig":"37"},{"size":1946,"mtime":1636098270295,"results":"54","hashOfConfig":"37"},{"size":1575,"mtime":1636083798781,"results":"55","hashOfConfig":"37"},{"size":13577,"mtime":1636473100861,"results":"56","hashOfConfig":"37"},{"size":6761,"mtime":1636083684777,"results":"57","hashOfConfig":"37"},{"size":4561,"mtime":1636262898084,"results":"58","hashOfConfig":"37"},{"size":918,"mtime":1636040630608,"results":"59","hashOfConfig":"37"},{"size":1920,"mtime":1635177770160,"results":"60","hashOfConfig":"37"},{"size":1771,"mtime":1636466481744,"results":"61","hashOfConfig":"37"},{"size":5495,"mtime":1636466104640,"results":"62","hashOfConfig":"37"},{"size":918,"mtime":1636468907203,"results":"63","hashOfConfig":"37"},{"size":354,"mtime":1635925375651,"results":"64","hashOfConfig":"37"},{"size":407,"mtime":1635950108393,"results":"65","hashOfConfig":"37"},{"size":303,"mtime":1636454743643,"results":"66","hashOfConfig":"37"},{"size":384,"mtime":1635955458779,"results":"67","hashOfConfig":"37"},{"size":366,"mtime":1636098156203,"results":"68","hashOfConfig":"37"},{"size":2153,"mtime":1636468904686,"results":"69","hashOfConfig":"37"},{"size":11269,"mtime":1636468905792,"results":"70","hashOfConfig":"37"},{"size":384,"mtime":1636468903083,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"g7zobw",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\LearnFullstack\\admin\\src\\index.js",[],["152","153"],"D:\\LearnFullstack\\admin\\src\\reportWebVitals.js",[],"D:\\LearnFullstack\\admin\\src\\App.js",["154"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./component/Header/Header\";\nimport TrangChuContainer from \"./containers/TrangChuContainer\";\nimport OrderManageMentContainer from \"./containers/OrderManageMentContainer\";\nimport NotificationsNoneIcon from \"@mui/icons-material/NotificationsNone\";\nimport QuanLyNguoiDungContainer from \"./containers/QuanLyNguoiDungContainer\";\nimport QuanLySanPhamContainer from \"./containers/QuanLySanPhamContainer\";\nimport QuanLyPhanHoiContainer from \"./containers/QuanLyPhanHoiContainer\";\nimport Loading from \"./component/Loading/Loading\";\nimport Login from \"./component/Login/Login\";\nimport Chat from \"./component/Chat/Chat\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nclass App extends Component {\n  componentDidMount() {}\n  render() {\n    let route = [\n      {\n        path: \"/\",\n        exact: true,\n        component: <Login />,\n      },\n      {\n        path: \"/admin\",\n        exact: true,\n        component: <TrangChuContainer />,\n      },\n      {\n        path: \"/quanlynguoidung\",\n        exact: false,\n        component: <QuanLyNguoiDungContainer />,\n      },\n      {\n        path: \"/quanlygiohang\",\n        exact: false,\n        component: <OrderManageMentContainer />,\n      },\n      {\n        path: \"/quanlysanpham\",\n        exact: false,\n        component: <QuanLySanPhamContainer />,\n      },\n      {\n        path: \"/quanlyphanhoi\",\n        exact: false,\n        component: <QuanLyPhanHoiContainer />,\n      },\n      {\n        path: \"/chat\",\n        exact: false,\n        component: <Chat />,\n      },\n    ];\n    return (\n      <>\n        <div class=\"container-children\">\n          <div className=\"containerxxx\">\n            <Link to=\"/\" className=\"logo\">\n              Tiend\n            </Link>\n            <span>Z</span>\n            <div className=\"menu\">\n              <NotificationsNoneIcon></NotificationsNoneIcon>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"main\">\n          <div className=\"left\">\n            <Header />\n          </div>\n          <div className=\"right\">\n            {this.props.loading ? (\n              <Loading />\n            ) : (\n              route.map((route, index) => {\n                return (\n                  <Route key={index} path={route.path} exact={route.exact}>\n                    {route.component}\n                  </Route>\n                );\n              })\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nconst mapStateToprops = (state) => {\n  return {\n    loading: state.loading,\n  };\n};\nconst mapDisptachToProps = (dispatch) => {\n  return {};\n};\nexport default connect(mapStateToprops, mapDisptachToProps)(App);\n","D:\\LearnFullstack\\admin\\src\\reducers\\indexReducers.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\messageReducer.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\getAllUsers.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\getAllorders.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\getAllProducts.js",[],"D:\\LearnFullstack\\admin\\src\\containers\\TrangChuContainer.js",[],"D:\\LearnFullstack\\admin\\src\\containers\\QuanLyNguoiDungContainer.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\hotCustomerReducer.js",[],"D:\\LearnFullstack\\admin\\src\\containers\\QuanLySanPhamContainer.js",[],"D:\\LearnFullstack\\admin\\src\\containers\\OrderManageMentContainer.js",[],"D:\\LearnFullstack\\admin\\src\\component\\Header\\Header.js",[],"D:\\LearnFullstack\\admin\\src\\types\\typeOfActions.js",["155"],"export default {\r\n  GET_ALL_USER: \"GET_ALL_USER\",\r\n  MESSAGE_USER: \"MESSAGE_USER\",\r\n  HOT_CUSTOMER: \"HOT_CUSTOMER\",\r\n  GET_ALL_ORDERS: \"GET_ALL_ORDERS\",\r\n  GET_ALL_PRODUCTS: \"GET_ALL_PRODUCTS\",\r\n  GET_DETAILS_PRODUCTS: \"GET_DETAILS_PRODUCTS\",\r\n  GET_ALL_FEEDBACK: \"GET_ALL_FEEDBACK\",\r\n  MESSAGE_ALL: \"MESSAGE_ALL\", \r\n  ADD_LOADING: \"ADD_LOADING\",\r\n  REMOVE_LOADING: \"REMOVE_LOADING\",\r\n  GET_ALL_CANCEL_PRODUCT: \"GET_ALL_CANCEL_PRODUCT\",\r\n  GET_CHAT: \"GET_CHAT\",\r\n  UPDATE_CHAT: \"UPDATE_CHAT\",\r\n};\r\n","D:\\LearnFullstack\\admin\\src\\actions\\ordersAction.js",[],"D:\\LearnFullstack\\admin\\src\\actions\\userActions.js",["156","157"],"import types from \"./../types/typeOfActions\";\r\nimport callApi from \"./../callApi/callApi\";\r\nimport axios from \"axios\";\r\nclass User {\r\n  getAllUser = () => {\r\n    return async (dispatch) => {\r\n      let userList = await callApi(`http://localhost:9000/get-user`, `GET`);\r\n      return dispatch({\r\n        type: types.GET_ALL_USER,\r\n        payload: userList.userList,\r\n      });\r\n    };\r\n  };\r\n  deleteUser = (id) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/user/${id}`, `DELETE`);\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  createNewUser = (obj) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/register`, `POST`, obj);\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n      console.log(result);\r\n    };\r\n  };\r\n  handleUpdateUser = (obj) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(\r\n        `http://localhost:9000/user/${obj.id}`,\r\n        `PUT`,\r\n        obj\r\n      );\r\n      dispatch({\r\n        type: types.MESSAGE_USER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  getHotCustomer = () => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/query`, `GET`);\r\n      dispatch({\r\n        type: types.HOT_CUSTOMER,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  getAllMess = () => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/chat`, `GET`);\r\n      dispatch({\r\n        type: types.GET_CHAT,\r\n        payload: result,\r\n      });\r\n    };\r\n  };\r\n  handleRepMess = (id) => {\r\n    return async (dispatch) => {\r\n      let result = await callApi(`http://localhost:9000/chat/${id}`, `PUT`);\r\n    };\r\n  };\r\n  handleLogin = (infoUser) => {\r\n    return async (dispatchEvent) => {\r\n      let result = await callApi(\r\n        `http://localhost:9000/`,\r\n        `POST`,\r\n        infoUser,\r\n        null\r\n      );\r\n      console.log(result);\r\n      // document.cookie = JSON.stringify(result);\r\n      // localStorage.setItem(\"info\", JSON.stringify(result));\r\n      // localStorage.setItem(\"token\", JSON.stringify(result.token));\r\n      dispatchEvent({\r\n        type: types.MESSAGE_USER,\r\n        payload: {\r\n          statusCode: result.statusCode,\r\n          message: result.message,\r\n        },\r\n      });\r\n    };\r\n  };\r\n  addLoading = () => {\r\n    return async (dispatch) => {\r\n      dispatch({\r\n        type: types.ADD_LOADING,\r\n      });\r\n    };\r\n  };\r\n  removeLoading = () => {\r\n    return async (dispatch) => {\r\n      dispatch({\r\n        type: types.REMOVE_LOADING,\r\n      });\r\n    };\r\n  };\r\n}\r\nexport default new User();\r\n","D:\\LearnFullstack\\admin\\src\\component\\TrangChu\\TrangChu.js",[],"D:\\LearnFullstack\\admin\\src\\actions\\getAllProducts.js",[],"D:\\LearnFullstack\\admin\\src\\component\\QuanLyNguoiDung\\QuanLyNguoiDung.js",["158","159"],"import React, { Component } from \"react\";\r\nimport { TextField, Button } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { withAlert } from \"react-alert\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport CancelPresentationOutlinedIcon from \"@mui/icons-material/CancelPresentationOutlined\";\r\nimport AddOutlinedIcon from \"@mui/icons-material/AddOutlined\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport \"./QuanLyNguoiDung.css\";\r\nimport io from \"socket.io-client\";\r\nclass QuanLyNguoiDung extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      listUser: [],\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      address: \"\",\r\n      numberphone: \"\",\r\n      role: \"\",\r\n      toggleForm: true,\r\n      isLoading: true,\r\n    };\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.getHotCustomer();\r\n    this.socket.on(\"register\", () => {\r\n      this.props.getAllUser();\r\n    });\r\n  }\r\n  callFunctionHandleMessage = () => {\r\n    setTimeout(() => {\r\n      this.props.getAllUser();\r\n      let { statusCode, message } = this.props.message;\r\n      console.log(message);\r\n      const alert = this.props.alert;\r\n      if (statusCode === 200) {\r\n        alert.success(message);\r\n        this.setState({\r\n          username: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          id: \"\",\r\n          address: \"\",\r\n          numberphone: \"\",\r\n          role: \"\",\r\n        });\r\n        return;\r\n      }\r\n      alert.error(message);\r\n    }, 900);\r\n  };\r\n  handleClick = (value) => {\r\n    let { id } = value.row;\r\n    if (window.confirm(`Are you sure you want to delete account ?`)) {\r\n      this.props.deleteUser(id);\r\n      this.callFunctionHandleMessage();\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.listUser !== this.props.listUser) {\r\n      this.setState({\r\n        listUser: [...this.props.listUser],\r\n        isLoading: false,\r\n      });\r\n    }\r\n  }\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  createNewUser = (e) => {\r\n    e.preventDefault();\r\n    let { role, id, username, email, password, address, numberphone } =\r\n      this.state;\r\n    if (!id) {\r\n      this.props.createNewUser({\r\n        username,\r\n        email,\r\n        password,\r\n        address,\r\n        numberphone,\r\n        role,\r\n      });\r\n      this.callFunctionHandleMessage();\r\n      return;\r\n    }\r\n    this.props.handleUpdateUser({\r\n      id,\r\n      role,\r\n      username,\r\n      email,\r\n      password,\r\n      address,\r\n      numberphone,\r\n    });\r\n    this.callFunctionHandleMessage();\r\n  };\r\n  handleUpdateUser = (value) => {\r\n    this.setState({\r\n      toggleForm: true,\r\n    });\r\n    let { role, id, email, username, password, address, numberphone } =\r\n      value.row;\r\n    this.setState({\r\n      id,\r\n      email,\r\n      username,\r\n      password,\r\n      address,\r\n      numberphone,\r\n      role,\r\n    });\r\n  };\r\n  handleToggleForm = () => {\r\n    this.setState({\r\n      toggleForm: !this.state.toggleForm,\r\n    });\r\n  };\r\n  handleCloseForm = () => {\r\n    this.setState({\r\n      toggleForm: false,\r\n    });\r\n  };\r\n  handleGetNumberPhone = (e) => {\r\n    this.setState({\r\n      numberphone: e,\r\n    });\r\n  };\r\n  handleOnchange = (e) => {\r\n    console.log(e.target.name);\r\n  };\r\n  render() {\r\n    const columns = [\r\n      { field: \"id\", headerName: \"ID\", width: 70, headerAlign: \"center\" },\r\n      {\r\n        field: \"username\",\r\n        headerName: \"Username\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"email\",\r\n        headerName: \"Email\",\r\n        width: 200,\r\n      },\r\n      {\r\n        field: \"role\",\r\n        headerName: \"Role\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"password\",\r\n        headerName: \"Password\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"address\",\r\n        headerName: \"Address\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"numberphone\",\r\n        headerName: \"Number Phone\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"button\",\r\n        headerName: \"Action\",\r\n        width: 200,\r\n\r\n        renderCell: (cellValues) => {\r\n          return (\r\n            <>\r\n              <Button\r\n                className=\"edit\"\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n                onClick={() => this.handleUpdateUser(cellValues)}\r\n              >\r\n                EDIT\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"warning\"\r\n                onClick={() => this.handleClick(cellValues)}\r\n              >\r\n                DELETE\r\n              </Button>\r\n            </>\r\n          );\r\n        },\r\n        headerAlign: \"center\",\r\n      },\r\n    ];\r\n\r\n    const rows = [...this.state.listUser.reverse()];\r\n    let { hotCus } = this.props;\r\n    let getKey = [];\r\n    for (const key in hotCus) {\r\n      getKey.push([key, hotCus[key]]);\r\n    }\r\n    let sortKey = [...getKey.sort((a, b) => b[1] - a[1])];\r\n    let getArr = [];\r\n    let top = 1;\r\n    sortKey.forEach((e) => {\r\n      let mang = this.state.listUser.filter(\r\n        (user) => user.id === parseInt(e[0])\r\n      );\r\n      const obj = Object.assign({}, mang);\r\n      let newObj = { ...obj[0] };\r\n      newObj.total = e[1];\r\n      newObj.top = top++;\r\n      getArr.push({ ...newObj });\r\n    });\r\n    const rowss = [...getArr];\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.toggleForm ? (\r\n          <div className=\"form\">\r\n            <span className=\"text-controll\">FORM COTROLL CUSTOMER</span>\r\n            <CancelPresentationOutlinedIcon\r\n              onClick={this.handleCloseForm}\r\n              className=\"close-button\"\r\n            ></CancelPresentationOutlinedIcon>\r\n            <TextField\r\n              onChange={this.handleOnChange}\r\n              className=\"input\"\r\n              id=\"outlined-basic\"\r\n              label=\"User Name\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"username\"\r\n              value={this.state.username}\r\n            />\r\n            <TextField\r\n              onChange={this.handleOnChange}\r\n              className=\"input\"\r\n              id=\"filled-basic\"\r\n              label=\"Email\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"email\"\r\n              aria-controls\r\n              value={this.state.email}\r\n            />\r\n            <TextField\r\n              onChange={this.handleOnChange}\r\n              className=\"input\"\r\n              id=\"standard-basic\"\r\n              label=\"Pass word\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              value={this.state.password}\r\n            />\r\n            <TextField\r\n              onChange={this.handleOnChange}\r\n              className=\"input\"\r\n              id=\"standard-basic\"\r\n              label=\"Address\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"address\"\r\n              value={this.state.address}\r\n            />\r\n            <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n              <InputLabel id=\"demo-simple-select-standard-label\">\r\n                Role\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-standard-label\"\r\n                id=\"demo-simple-select-standard\"\r\n                label=\"Age\"\r\n                onChange={this.handleOnChange}\r\n                name=\"role\"\r\n                value={this.state.role}\r\n              >\r\n                <MenuItem value=\"customer\" selected={true}>\r\n                  customer\r\n                </MenuItem>\r\n                <MenuItem value=\"admin\">admin</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"numberphone\">Number Phone</label>\r\n              <PhoneInput\r\n                placeholder=\"Enter phone number\"\r\n                onChange={this.handleGetNumberPhone}\r\n                value={this.state.numberphone}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              onClick={this.createNewUser}\r\n              className=\"success-btn\"\r\n            >\r\n              {this.state.id ? `Update` : `Register`}\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {this.state.isLoading ? (\r\n          `Loading Data . . . Please waiting !!! `\r\n        ) : (\r\n          <>\r\n            <div className=\"data\">\r\n              <Button\r\n                onClick={this.handleToggleForm}\r\n                style={{ marginBottom: \"20px\" }}\r\n                className=\"edit\"\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n              >\r\n                Add Account\r\n                <AddOutlinedIcon style={{ paddingLeft: \"10px\" }} />\r\n              </Button>\r\n              <DataGrid rows={rows} columns={columns} pageSize={4} />\r\n            </div>\r\n            <div className=\"user\">\r\n              <div className=\"hot-customer\">\r\n                <span className=\"top-customer\">TOP CUSTOMER :v</span>\r\n                {/* {getArr.map((user) => {\r\n                  return (\r\n                    <div className=\"custommer\">\r\n                      <h4>{user.top}</h4>\r\n                      <div className=\"custommer__name\">{user.name}</div>\r\n                      <div className=\"custommer__email\">{user.email}</div>\r\n                      <div className=\"custommer__creadAt\">{user.createdAt}</div>\r\n                      <div className=\"custommer__total\">{user.total}</div>\r\n                    </div>\r\n                  );\r\n                })} */}\r\n                <TableContainer component={Paper}>\r\n                  <Table\r\n                    sx={{ minWidth: 650, textAlign: \"center\" }}\r\n                    aria-label=\"caption table\"\r\n                  >\r\n                    <caption>TOP CUSTOMERS</caption>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Top</TableCell>\r\n                        <TableCell align=\"center\">Name</TableCell>\r\n                        <TableCell align=\"center\">Email&nbsp;(g)</TableCell>\r\n                        <TableCell align=\"center\">\r\n                          Created At&nbsp;(g)\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">Total&nbsp;($)</TableCell>\r\n                        <TableCell align=\"center\">Sticket&nbsp;($)</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{ textAlign: \"center\" }}>\r\n                      {rowss.map((row) => (\r\n                        <TableRow\r\n                          className=\"row-username\"\r\n                          style={{ color: \"red !important\" }}\r\n                          key={row.name}\r\n                        >\r\n                          <TableCell component=\"th\" scope=\"row\">\r\n                            {row.top}\r\n                          </TableCell>\r\n                          <TableCell className=\"text-row\" align=\"center\">\r\n                            {row.username}\r\n                          </TableCell>\r\n                          <TableCell className=\"text-row\" align=\"center\">\r\n                            {row.email}\r\n                          </TableCell>\r\n                          <TableCell className=\"text-row\" align=\"center\">\r\n                            {row.createdAt}\r\n                          </TableCell>\r\n                          <TableCell className=\"text-row\" align=\"center\">\r\n                            {row.total} $\r\n                          </TableCell>\r\n                          <TableCell className=\"text-row\" align=\"center\">\r\n                            <Button\r\n                              className=\"edit\"\r\n                              variant=\"contained\"\r\n                              color=\"success\"\r\n                              className=\"success-btn\"\r\n                            >\r\n                              Sticket\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                ;\r\n              </div>\r\n              <div className=\"active-customer\">\r\n                <h3>New Customer</h3>\r\n                <DataGrid\r\n                  rows={rows}\r\n                  columns={columns}\r\n                  pageSize={6}\r\n                  autoHeight\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withAlert()(QuanLyNguoiDung);\r\n","D:\\LearnFullstack\\admin\\src\\component\\QuanLySanPham\\QuanLySanPham.js",["160","161","162","163"],"import React, { Component } from \"react\";\r\nimport CancelPresentationOutlinedIcon from \"@mui/icons-material/CancelPresentationOutlined\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport { TextField, Button } from \"@mui/material\";\r\nimport { withAlert } from \"react-alert\";\r\nimport \"./QuanLySanPham.css\";\r\nclass QuanLySanPham extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      title: \"\",\r\n      price: \"\",\r\n      description: \"\",\r\n      image: \"\",\r\n      activePage: 1,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let pagination = document.querySelector(\".pagination\");\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.pageYOffset > 100) {\r\n        pagination.classList.add(\"activePag\");\r\n      } else {\r\n      }\r\n    });\r\n  }\r\n  handlePageChange = (numberPage) => {\r\n    this.setState({\r\n      activePage: numberPage,\r\n    });\r\n    let token = JSON.parse(localStorage.getItem(\"token\"));\r\n    this.props.handlePageChange(numberPage, token);\r\n  };\r\n  deleteProduct = (id) => {\r\n    this.props.deleteProduct(id);\r\n    let numberPage = this.state.activePage;\r\n    setTimeout(() => {\r\n      const alert = this.props.alert;\r\n      let { statusCode, message } = this.props.messAll;\r\n      if (statusCode === 200) {\r\n        alert.success(message);\r\n        this.props.handlePageChange(numberPage);\r\n        return;\r\n      }\r\n      alert.error(message);\r\n    }, 500);\r\n  };\r\n  updateProduct = (product) => {\r\n    let { id, title, price, description, image } = product;\r\n    this.setState({ id, title, price, description, image });\r\n  };\r\n  renderProducts = () => {\r\n    return this.props.allProducts.map((product) => {\r\n      return (\r\n        <div className=\"card\">\r\n          <img src={product.image} />\r\n          <h3>{product.title}</h3>\r\n          <h2>${product.price} </h2>\r\n          <span>{product.description.slice(0, 100)}</span>\r\n          <div className=\"button-gr\">\r\n            <button\r\n              onClick={() => this.updateProduct(product)}\r\n              type=\"button\"\r\n              class=\"btn-update\"\r\n            >\r\n              EDIT\r\n            </button>\r\n            <button\r\n              onClick={() => this.deleteProduct(product.id)}\r\n              type=\"button\"\r\n              class=\"btn-delete\"\r\n            >\r\n              DELETE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  handleGetImg = (e) => {\r\n    let data = new FormData();\r\n    data.append(\"file\", e.target.files[0]);\r\n    data.append(\"upload_preset\", \"nguyenthanhtung\");\r\n    fetch(`https://api.cloudinary.com/v1_1/artimate/image/upload`, {\r\n      method: \"POST\",\r\n      body: data,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          image: data.secure_url,\r\n        })\r\n      )\r\n      .catch((e) => console.log(e));\r\n  };\r\n  handleGetValue = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  handleUpdateProducts = (e) => {\r\n    e.preventDefault();\r\n\r\n    let { id, title, description, price, image } = this.state;\r\n    if (!id) {\r\n      let numberPage = this.state.activePage;\r\n      this.props.handleUpdateProducts({ title, description, price, image });\r\n      setTimeout(() => {\r\n        const alert = this.props.alert;\r\n        let { stateCode, message } = this.props.messAll;\r\n        if (stateCode === 200) {\r\n          this.props.handlePageChange(numberPage);\r\n          alert.success(message);\r\n          this.setState({\r\n            id: \"\",\r\n            title: \"\",\r\n            price: \"\",\r\n            description: \"\",\r\n            image: \"\",\r\n          });\r\n          return;\r\n        }\r\n        alert.error(message);\r\n      }, 500);\r\n      return;\r\n    }\r\n    this.props.updateProduct({ id, title, description, price, image });\r\n    let numberPage = this.state.activePage;\r\n    setTimeout(() => {\r\n      const alert = this.props.alert;\r\n      let { statusCode, message } = this.props.messAll;\r\n      if (statusCode === 200) {\r\n        alert.success(message);\r\n        this.setState({\r\n          id: \"\",\r\n          title: \"\",\r\n          price: \"\",\r\n          description: \"\",\r\n          image: \"\",\r\n        });\r\n        this.props.handlePageChange(numberPage);\r\n        return;\r\n      }\r\n      alert.error(message);\r\n    }, 500);\r\n  };\r\n  render() {\r\n    let { title, price, description, image } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"form-product\">\r\n            <span className=\"text-controll\">FORM COTROLL PRODUCTS</span>\r\n            <CancelPresentationOutlinedIcon\r\n              onClick={this.handleCloseForm}\r\n              className=\"close-button\"\r\n            ></CancelPresentationOutlinedIcon>\r\n            <TextField\r\n              className=\"input\"\r\n              id=\"standard-basic\"\r\n              size=\"small\"\r\n              type=\"file\"\r\n              name=\"image\"\r\n              onChange={this.handleGetImg}\r\n            />\r\n            <TextField\r\n              className=\"input\"\r\n              id=\"outlined-basic\"\r\n              label=\"Title\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"title\"\r\n              onChange={this.handleGetValue}\r\n              value={title}\r\n            />\r\n\r\n            <TextField\r\n              className=\"input\"\r\n              id=\"standard-basic\"\r\n              label=\"Price ($)\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"price\"\r\n              onChange={this.handleGetValue}\r\n              value={price}\r\n            />\r\n            <TextField\r\n              className=\"input\"\r\n              id=\"filled-basic\"\r\n              label=\"Description\"\r\n              variant=\"standard\"\r\n              size=\"small\"\r\n              name=\"description\"\r\n              aria-controls\r\n              onChange={this.handleGetValue}\r\n              value={description}\r\n            />\r\n            <Button\r\n              onClick={this.handleUpdateProducts}\r\n              className=\"edit\"\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className=\"success-btn\"\r\n            >\r\n              {this.state.id ? `UPDATE PRODUCT` : `ADD PRODUCT`}\r\n            </Button>\r\n          </div>\r\n          <div className=\"products\">{this.renderProducts()}</div>\r\n          <div className=\"pagination\">\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              itemsCountPerPage={30}\r\n              totalItemsCount={450}\r\n              onChange={this.handlePageChange.bind(this)}\r\n              pageRangeDisplayed={5}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withAlert()(QuanLySanPham);\r\n","D:\\LearnFullstack\\admin\\src\\component\\QuanLyGioHang\\QuanLyGioHang.js",["164"],"import React, { Component } from \"react\";\r\nimport \"./QuanLyGioHang.css\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport PendingActionsOutlinedIcon from \"@mui/icons-material/PendingActionsOutlined\";\r\nimport CancelOutlinedIcon from \"@mui/icons-material/CancelOutlined\";\r\nimport SpellcheckOutlinedIcon from \"@mui/icons-material/SpellcheckOutlined\";\r\nimport DoNotDisturbOnTotalSilenceOutlinedIcon from \"@mui/icons-material/DoNotDisturbOnTotalSilenceOutlined\";\r\nimport { withAlert } from \"react-alert\";\r\nimport io from \"socket.io-client\";\r\nclass QuanLyGioHang extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listOrder: [],\r\n    };\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.allOrders !== this.props.allOrders) {\r\n      this.setState({\r\n        listOrder: this.props.allOrders.orderList,\r\n      });\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.props.getAllOrders();\r\n    console.log(123);\r\n\r\n    this.socket.on(\"BUY_PRODUCT\", () => {\r\n      setTimeout(() => {\r\n        this.props.getAllOrders();\r\n      }, 500);\r\n    });\r\n  }\r\n  updateOrder = (id) => {\r\n    this.props.updateOrder(id);\r\n    this.socket.emit(\"CHANGE_STATUS\", id);\r\n    setTimeout(() => {\r\n      let { message, statusCode } = this.props.message;\r\n      let { success, error } = this.props.alert;\r\n      this.props.getAllOrders();\r\n      if (statusCode === 200) {\r\n        success(message);\r\n        return;\r\n      }\r\n      error(message);\r\n    }, 600);\r\n  };\r\n  render() {\r\n    const columns = [\r\n      {\r\n        field: \"idUser\",\r\n        headerName: \"Id User\",\r\n        width: 250,\r\n      },\r\n      {\r\n        field: \"img\",\r\n        headerName: \"Product\",\r\n        width: 180,\r\n        renderCell: (params) => <img src={params.row.image}></img>,\r\n      },\r\n      {\r\n        field: \"price\",\r\n        headerName: `Price `,\r\n        width: 250,\r\n      },\r\n\r\n      { field: \"createdAt\", width: 180 },\r\n      { field: \"quantity\", width: 180 },\r\n      {\r\n        field: \"status\",\r\n        width: 180,\r\n        renderCell: (params) => (\r\n          <p\r\n            onClick={() => this.updateOrder(params.row.id)}\r\n            className={params.row.active ? `active` : `pelement`}\r\n          >\r\n            {params.row.active ? `Process` : `Pending`}\r\n          </p>\r\n        ),\r\n        // (params.row.image ? \"1\" : \"2\")\r\n      },\r\n    ];\r\n\r\n    const rows = [...this.state.listOrder.reverse()];\r\n    const listPedding = this.state.listOrder.filter((list) => !list.active);\r\n    const process = this.state.listOrder.filter((list) => list.active);\r\n    let total = 0;\r\n    process.forEach((e) => {\r\n      total += parseFloat(e.quantity) + parseFloat(e.price);\r\n    });\r\n    return (\r\n      <div className=\"container__order\">\r\n        <div className=\"orders__management\">\r\n          <div className=\"order order-pending\">\r\n            <span>Order Pending</span>\r\n            <div className=\"order-pending-icon\">\r\n              <PendingActionsOutlinedIcon></PendingActionsOutlinedIcon>\r\n            </div>{\" \"}\r\n            <br />\r\n            <span className=\"number\">{listPedding.length}</span>\r\n          </div>\r\n          <div className=\"order order-cancel\">\r\n            <span>Order Cancel</span>\r\n            <div className=\"order-pending-icon\">\r\n              <CancelOutlinedIcon></CancelOutlinedIcon>\r\n            </div>\r\n            <br />\r\n            <span className=\"number\">{this.props.cancelProducts.length}</span>\r\n          </div>\r\n          <div className=\"order order-process\">\r\n            <span>Order Process</span>\r\n            <div className=\"order-pending-icon\">\r\n              <SpellcheckOutlinedIcon></SpellcheckOutlinedIcon>\r\n            </div>\r\n            <br />\r\n            <span className=\"number\">{process.length}</span>\r\n          </div>\r\n          <div className=\"order order-total\">\r\n            <span>Order Total</span>\r\n            <div className=\"order-pending-icon\">\r\n              <DoNotDisturbOnTotalSilenceOutlinedIcon></DoNotDisturbOnTotalSilenceOutlinedIcon>\r\n            </div>\r\n            <br />\r\n            <span className=\"number\"> $ {total.toFixed(2)}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"container__order--list\">\r\n          <DataGrid\r\n            pageSize={9}\r\n            rows={rows}\r\n            columns={columns}\r\n            checkboxSelection\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withAlert()(QuanLyGioHang);\r\n","D:\\LearnFullstack\\admin\\src\\callApi\\callApi.js",[],"D:\\LearnFullstack\\admin\\src\\component\\Chart\\Chart.js",["165"],"import React, { Component } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nexport default class Chart extends Component {\r\n  render() {\r\n    const data = [\r\n      {\r\n        name: \"month 1\",\r\n        uv: 4000,\r\n        pv: 2400,\r\n        amt: 2400,\r\n      },\r\n      {\r\n        name: \"month 2\",\r\n        uv: 3000,\r\n        pv: 1398,\r\n        amt: 2210,\r\n      },\r\n      {\r\n        name: \"month 3\",\r\n        uv: 3000,\r\n        pv: 9800,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 4\",\r\n        uv: 5000,\r\n        pv: 2800,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 5\",\r\n        uv: 3000,\r\n        pv: 2800,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 6\",\r\n        uv: 1000,\r\n        pv: 100,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 7\",\r\n        uv: 2000,\r\n        pv: 9800,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 8\",\r\n        uv: 2100,\r\n        pv: 900,\r\n        amt: 2290,\r\n      },\r\n      {\r\n        name: \"month 9\",\r\n        uv: 20,\r\n        pv: 9000,\r\n        amt: 2290,\r\n      },\r\n    ];\r\n    return (\r\n      <div>\r\n        <h2>Sale Anlytics</h2>\r\n        <LineChart\r\n          width={1300}\r\n          height={300}\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" stroke=\"#5550bd\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"pv\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 8 }}\r\n          />\r\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\LearnFullstack\\admin\\src\\containers\\QuanLyPhanHoiContainer.js",[],"D:\\LearnFullstack\\admin\\src\\component\\QuanLyPhanHoi\\QuanLyPhanHoi.js",["166"],"import React, { Component } from \"react\";\r\nimport CancelPresentationOutlinedIcon from \"@mui/icons-material/CancelPresentationOutlined\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { withAlert } from \"react-alert\";\r\nimport { TextField, Button } from \"@mui/material\";\r\nimport \"./QuanLyPhanHoi.css\";\r\nclass QuanLyPhanHoi extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      toggleForm: false,\r\n      email: \"\",\r\n      subject: \"\",\r\n      message: \"\",\r\n      idUser: \"\",\r\n      from: \"Tiendz Store\",\r\n    };\r\n  }\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  handleToggle = (e) => {\r\n    this.setState({\r\n      toggleForm: true,\r\n      email: e.row.email,\r\n      idUser: e.row.idUser,\r\n    });\r\n  };\r\n  handleCloseForm = () => {\r\n    this.setState({\r\n      toggleForm: false,\r\n    });\r\n  };\r\n  sendMessage = () => {\r\n    let { email, subject, message, idUser } = this.state;\r\n    this.props.sendMessage({ email, subject, message, idUser });\r\n    setTimeout(() => {\r\n      let { message, statusCode } = this.props.messAll;\r\n      let { success, error } = this.props.alert;\r\n      if (statusCode === 200) {\r\n        success(message);\r\n        return;\r\n      }\r\n      error(message);\r\n    }, 800);\r\n    this.setState({\r\n      email: \"\",\r\n      subject: \"\",\r\n      message: \"\",\r\n      idUser: \"\",\r\n    });\r\n  };\r\n  handleClick = (e) => {\r\n    if (window.confirm(`Are u sure delete feebback ?`)) {\r\n      this.props.deleteFeedback(e.row.id);\r\n    }\r\n    setTimeout(() => {\r\n      let { message, statusCode } = this.props.messAll;\r\n      let { success, error } = this.props.alert;\r\n      if (statusCode === 200) {\r\n        success(message);\r\n        return;\r\n      }\r\n      error(message);\r\n    }, 800);\r\n  };\r\n  render() {\r\n    const columns = [\r\n      { field: \"id\", headerName: \"ID\", width: 70, headerAlign: \"center\" },\r\n      {\r\n        field: \"username\",\r\n        headerName: \"Username\",\r\n        width: 140,\r\n      },\r\n      {\r\n        field: \"email\",\r\n        headerName: \"Email\",\r\n        width: 150,\r\n      },\r\n      {\r\n        field: \"subject\",\r\n        headerName: \"Subject\",\r\n        width: 100,\r\n      },\r\n      {\r\n        field: \"message\",\r\n        headerName: \"Message\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"createdAt\",\r\n        headerName: \"Send Date\",\r\n        width: 100,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        field: \"button\",\r\n        headerName: \"Action\",\r\n        width: 200,\r\n\r\n        renderCell: (cellValues) => {\r\n          return (\r\n            <>\r\n              <Button\r\n                className=\"edit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => this.handleToggle(cellValues)}\r\n                style={{ marginRight: \"10px\" }}\r\n              >\r\n                Messenger\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"warning\"\r\n                onClick={() => this.handleClick(cellValues)}\r\n              >\r\n                Xóa\r\n              </Button>\r\n            </>\r\n          );\r\n        },\r\n        headerAlign: \"center\",\r\n      },\r\n    ];\r\n    const rows = [...this.props.fb.reverse()];\r\n\r\n    return (\r\n      <>\r\n        <div class=\"fb\">\r\n          {this.state.toggleForm && (\r\n            <div className=\"form\">\r\n              <span className=\"text-controll\">FORM COTROLL FEEDBACK</span>\r\n              <CancelPresentationOutlinedIcon\r\n                onClick={this.handleCloseForm}\r\n                className=\"close-button\"\r\n              ></CancelPresentationOutlinedIcon>\r\n              <TextField\r\n                onChange={this.handleOnChange}\r\n                className=\"input\"\r\n                id=\"standard-basic\"\r\n                label=\"From\"\r\n                variant=\"standard\"\r\n                size=\"small\"\r\n                name=\"from\"\r\n                value={this.state.from}\r\n              />\r\n              <TextField\r\n                onChange={this.handleOnChange}\r\n                className=\"input\"\r\n                id=\"filled-basic\"\r\n                label=\"SEND TO\"\r\n                variant=\"standard\"\r\n                size=\"small\"\r\n                name=\"email\"\r\n                aria-controls\r\n                value={this.state.email}\r\n              />\r\n              <TextField\r\n                onChange={this.handleOnChange}\r\n                className=\"input\"\r\n                id=\"outlined-basic\"\r\n                label=\"Subject\"\r\n                variant=\"standard\"\r\n                size=\"small\"\r\n                name=\"subject\"\r\n                value={this.state.subject}\r\n              />\r\n\r\n              <TextField\r\n                onChange={this.handleOnChange}\r\n                className=\"input\"\r\n                id=\"standard-basic\"\r\n                label=\"Message\"\r\n                variant=\"standard\"\r\n                size=\"small\"\r\n                name=\"message\"\r\n                value={this.state.message}\r\n              />\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n                onClick={this.sendMessage}\r\n                className=\"success-btn\"\r\n              >\r\n                SEND\r\n              </Button>\r\n            </div>\r\n          )}\r\n          <DataGrid rows={rows} columns={columns} pageSize={14} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withAlert()(QuanLyPhanHoi);\r\n","D:\\LearnFullstack\\admin\\src\\actions\\getAllFeedback.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\getAllFeedbackReducer.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\messageAll.js",[],"D:\\LearnFullstack\\admin\\src\\component\\Loading\\Loading.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\loadingReducer.js",[],"D:\\LearnFullstack\\admin\\src\\reducers\\cancelProducts.js",[],"D:\\LearnFullstack\\admin\\src\\component\\Login\\Login.js",[],"D:\\LearnFullstack\\admin\\src\\component\\Chat\\Chat.js",["167","168","169","170","171","172","173"],"import React, { Component } from \"react\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport actions from \"./../../actions/userActions\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport \"./Chat.css\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport axios from \"axios\";\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      arr: [],\r\n      isSeen: true,\r\n      idUser: 0,\r\n      id: 0,\r\n      message: \"\",\r\n      username: \"\",\r\n      image: \"\",\r\n      messBuyId: [],\r\n      newArr: [],\r\n      isToggleForm: false,\r\n      isEntering: false,\r\n    };\r\n    this.socket = io(`localhost:9000/`, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.props.getAllUser();\r\n    this.props.getAllMess();\r\n    let idUser = [];\r\n    this.props.listUser.forEach((element) => {\r\n      idUser.push(element.id);\r\n    });\r\n    idUser.forEach((element) => {\r\n      this.socket.emit(\"join_rom\", element);\r\n    });\r\n    let arrObj = [];\r\n    setTimeout(() => {\r\n      this.props.chat.forEach((el, i) => {\r\n        if (el.username !== \"admin\") {\r\n          let result = arrObj.findIndex((e) => e.email === el.email);\r\n          if (result === -1) {\r\n            arrObj.push(el);\r\n          } else {\r\n            arrObj[result].email = el.email;\r\n            arrObj[result].message = el.message;\r\n            arrObj[result].username = el.username;\r\n            arrObj[result].image = el.image;\r\n            arrObj[result].active = el.active;\r\n          }\r\n        }\r\n      });\r\n      this.setState({\r\n        arr: arrObj,\r\n        newArr: arrObj,\r\n      });\r\n    }, 300);\r\n\r\n    this.socket.on(\"message_hi\", (message) => {\r\n      let { arr } = this.state;\r\n      let findIndex = arr.findIndex((e) => e.email === message.email);\r\n      if (findIndex === -1) {\r\n        arr.push(message);\r\n      } else {\r\n        arr[findIndex].username = message.username;\r\n        arr[findIndex].message = message.message;\r\n        arr[findIndex].image = message.image;\r\n        arr[findIndex].active = true;\r\n      }\r\n      this.setState({\r\n        arr: arr,\r\n        isEntering: false,\r\n      });\r\n    });\r\n    let { arr } = this.state;\r\n    setTimeout(() => {\r\n      arrObj.forEach((e) => {\r\n        axios\r\n          .get(`http://localhost:9000/chat/id?q=${e.idUser}`)\r\n          .then((res) => {\r\n            let data = res.data.result;\r\n            e.message = data[data.length - 1].message;\r\n            arr.push(e);\r\n            return arr;\r\n          })\r\n          .then((data) => {\r\n            this.setState({\r\n              arr: data,\r\n            });\r\n          });\r\n      });\r\n    }, 700);\r\n    this.socket.on(\"naylacaikhacdm\", (message) => {\r\n      this.setState({\r\n        isEntering: true,\r\n      });\r\n    });\r\n  }\r\n  handleOnChange = (e) => {\r\n    console.log(this.state.id);\r\n\r\n    this.setState({\r\n      message: e.target.value,\r\n    });\r\n    this.socket.emit(\"entering_loading\", this.state.idUser);\r\n  };\r\n  // SEEN TIN NHẮN MỖI KHI CLICK VÀO\r\n  handleRepMess = (id, idUser) => {\r\n    this.props.handleRepMess(idUser);\r\n    setTimeout(() => {\r\n      let { arr } = this.state;\r\n      let findId = this.state.arr.findIndex((e) => e.id === id);\r\n      arr[findId].active = false;\r\n      this.setState(\r\n        {\r\n          id: id,\r\n          arr: arr,\r\n          username: arr[findId].username,\r\n          image: arr[findId].image,\r\n          isToggleForm: true,\r\n        },\r\n        () => {\r\n          let app = document.querySelector(\".app\");\r\n          app.scrollTo(0, app.scrollHeight - app.clientHeight);\r\n        }\r\n      );\r\n    }, 300);\r\n    // Lấy tin nhắn của mỗi người dùng ứng với id user\r\n    axios\r\n      .get(`http://localhost:9000/chat/id?q=${idUser}`)\r\n      .then((res) => {\r\n        let data = res.data.result;\r\n        this.setState({\r\n          messBuyId: data,\r\n          idUser: idUser,\r\n          id: id,\r\n        });\r\n      })\r\n      .catch((e) => console.log(e));\r\n    // Khi lắng nghe được sự kiện thì lập tức phản hồi với on socket\r\n    this.socket.on(\"message_hi\", (message) => {\r\n      setTimeout(() => {\r\n        axios\r\n          .get(`http://localhost:9000/chat/id?q=${this.state.idUser}`)\r\n          .then((res) => {\r\n            let data = res.data.result;\r\n            this.setState(\r\n              {\r\n                messBuyId: data,\r\n              },\r\n              () => {\r\n                let app = document.querySelector(\".app\");\r\n                app.scrollTo(0, app.scrollHeight);\r\n              }\r\n            );\r\n          });\r\n      }, 200);\r\n    });\r\n  };\r\n  // MỞ RA 1 TAB MỚI ĐỂ CHÁT\r\n  handleOnClick = (e) => {\r\n    e.preventDefault();\r\n    let { message, idUser, arr, id } = this.state;\r\n    // DISPLAY 1 THÔNG TIN TỚI NGƯỜI DÙNG\r\n    this.socket.emit(\"send_mess\", {\r\n      message: message,\r\n      idUser: +idUser,\r\n      username: \"admin\",\r\n      email: \"admin123@gmail.com\",\r\n      image:\r\n        \"https://res.cloudinary.com/artimate/image/upload/v1636128070/dxj8ut8elprbqguoxblh.jpg\",\r\n    });\r\n    // LƯU MESS NÀY VÀO DATABASE\r\n    axios\r\n      .post(`http://localhost:9000/chat`, {\r\n        message: message,\r\n        idUser: idUser,\r\n        username: \"admin\",\r\n        email: \"admin123@gmail.com\",\r\n        image:\r\n          \"https://res.cloudinary.com/artimate/image/upload/v1636128070/dxj8ut8elprbqguoxblh.jpg\",\r\n      })\r\n      .then((res) => {\r\n        setTimeout(() => {\r\n          axios.get(`http://localhost:9000/chat/id?q=${idUser}`).then((res) => {\r\n            let data = res.data.result;\r\n            this.props.getAllMess();\r\n            setTimeout(() => {\r\n              let findId = arr.findIndex((e) => e.idUser === idUser);\r\n              arr[findId].message = data[data.length - 1].message;\r\n              arr[findId].active = false;\r\n              arr[findId].usernameAdmin = \"admin\";\r\n              this.setState({\r\n                arr: arr,\r\n              });\r\n            }, 300);\r\n            this.setState(\r\n              {\r\n                messBuyId: data,\r\n                message: \"\",\r\n                arr: arr,\r\n              },\r\n              () => {\r\n                let app = document.querySelector(\".app\");\r\n                app.scrollTo(0, app.scrollHeight - app.clientHeight);\r\n              }\r\n            );\r\n          });\r\n        }, 100);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  handleOnCloseForm = () => {\r\n    this.setState({\r\n      isToggleForm: false,\r\n    });\r\n  };\r\n  handleOnFocus = (e) => {\r\n    let { arr, idUser, id } = this.state;\r\n    let findId = arr.findIndex((e) => e.idUser === idUser);\r\n    arr[findId].active = false;\r\n    this.setState({\r\n      arr: arr,\r\n    });\r\n  };\r\n  handleSearch = (e) => {\r\n    let value = e.target.value;\r\n    let { arr } = this.state;\r\n    if (value.length > 1) {\r\n      let findArr = this.state.newArr.filter((e) =>\r\n        e.username.toLowerCase().includes(value)\r\n      );\r\n      this.setState({\r\n        arr: findArr,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        arr: this.state.newArr,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"contasiner\">\r\n        <div className=\"form__chat\">\r\n          <h1>MESSENGER</h1>\r\n          <div className=\"input-mess\">\r\n            <SearchIcon className=\"search-icon\" />\r\n            <input onChange={this.handleSearch} placeholder=\"Search . . .\" />\r\n          </div>\r\n\r\n          {this.state.arr.map((e) => {\r\n            return (\r\n              <div\r\n                onClick={() => this.handleRepMess(e.id, e.idUser)}\r\n                className=\"mess\"\r\n              >\r\n                <div className=\"avt\">\r\n                  <img src={e.image} />\r\n                </div>\r\n                <div className=\"content\">\r\n                  <div className=\"content-mess\">\r\n                    <h3 className=\"username\">{e.username}</h3>\r\n                    <span className={e.active ? `message isActive` : `message`}>\r\n                      {e.message}\r\n                    </span>\r\n                  </div>\r\n                  <div className={e.active ? `seen` : \"\"}></div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {this.state.isToggleForm && (\r\n          <div className=\"data\">\r\n            <div className=\"app\">\r\n              <div className=\"chat__realtime\">\r\n                <div className=\"info\">\r\n                  <div className=\"img\">\r\n                    <img src={this.state.image} />\r\n                  </div>\r\n                  <div className={`name ${this.state.username}`}>\r\n                    <h3>{this.state.username}</h3>\r\n                  </div>\r\n                </div>\r\n                <div className=\"close-icon\">\r\n                  <CloseIcon onClick={this.handleOnCloseForm} />\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-mess\">\r\n                {this.state.messBuyId.map((e) => {\r\n                  return (\r\n                    <div className=\"all__mess\">\r\n                      <div className=\"all__mess-img\">\r\n                        {e.username !== \"admin\" && <img src={e.image} />}\r\n                      </div>\r\n                      <span className={`mess__detail ${e.username}`}>\r\n                        {e.message} <br />{\" \"}\r\n                      </span>\r\n                    </div>\r\n                  );\r\n                })}\r\n                {this.state.isEntering && (\r\n                  <span className=\"ityping\">{`${this.state.username}  is entering . . .`}</span>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"input__message\">\r\n                <TextField\r\n                  className=\"input\"\r\n                  id=\"standard-basic\"\r\n                  label=\"Message . . .\"\r\n                  variant=\"standard\"\r\n                  size=\"small\"\r\n                  name=\"address\"\r\n                  onChange={this.handleOnChange}\r\n                  value={this.state.message}\r\n                  autoComplete=\"off\"\r\n                  onFocus={this.handleOnFocus}\r\n                />\r\n                <div>\r\n                  <span class=\"bottom\"></span>\r\n                  <span class=\"right\"></span>\r\n                  <span class=\"top\"></span>\r\n                  <span class=\"left\"></span>\r\n                </div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  onClick={this.handleOnClick}\r\n                >\r\n                  SEND\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return { listUser: state.listUser, chat: state.chat };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllUser: () => {\r\n      dispatch(actions.getAllUser());\r\n    },\r\n    getAllMess: () => {\r\n      dispatch(actions.getAllMess());\r\n    },\r\n    handleRepMess: (id) => {\r\n      dispatch(actions.handleRepMess(id));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n","D:\\LearnFullstack\\admin\\src\\reducers\\chatReducer.js",[],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":14,"column":10,"nodeType":"180","messageId":"181","endLine":14,"endColumn":20},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","endLine":15,"endColumn":3},{"ruleId":"178","severity":1,"message":"185","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"178","severity":1,"message":"186","line":66,"column":11,"nodeType":"180","messageId":"181","endLine":66,"endColumn":17},{"ruleId":"187","severity":1,"message":"188","line":263,"column":15,"nodeType":"189","endLine":263,"endColumn":28},{"ruleId":"190","severity":1,"message":"191","line":402,"column":31,"nodeType":"189","messageId":"192","endLine":402,"endColumn":54},{"ruleId":"193","severity":1,"message":"194","line":57,"column":11,"nodeType":"195","endLine":57,"endColumn":38},{"ruleId":"178","severity":1,"message":"196","line":149,"column":38,"nodeType":"180","messageId":"181","endLine":149,"endColumn":43},{"ruleId":"187","severity":1,"message":"188","line":195,"column":15,"nodeType":"189","endLine":195,"endColumn":28},{"ruleId":"190","severity":1,"message":"191","line":204,"column":15,"nodeType":"189","messageId":"192","endLine":204,"endColumn":38},{"ruleId":"193","severity":1,"message":"194","line":62,"column":33,"nodeType":"195","endLine":62,"endColumn":61},{"ruleId":"178","severity":1,"message":"197","line":10,"column":3,"nodeType":"180","messageId":"181","endLine":10,"endColumn":22},{"ruleId":"187","severity":1,"message":"188","line":159,"column":17,"nodeType":"189","endLine":159,"endColumn":30},{"ruleId":"198","severity":1,"message":"199","line":19,"column":7,"nodeType":"200","messageId":"201","endLine":19,"endColumn":14},{"ruleId":"178","severity":1,"message":"202","line":167,"column":33,"nodeType":"180","messageId":"181","endLine":167,"endColumn":35},{"ruleId":"178","severity":1,"message":"202","line":223,"column":24,"nodeType":"180","messageId":"181","endLine":223,"endColumn":26},{"ruleId":"178","severity":1,"message":"203","line":232,"column":11,"nodeType":"180","messageId":"181","endLine":232,"endColumn":14},{"ruleId":"193","severity":1,"message":"194","line":263,"column":19,"nodeType":"195","endLine":263,"endColumn":40},{"ruleId":"193","severity":1,"message":"194","line":284,"column":21,"nodeType":"195","endLine":284,"endColumn":51},{"ruleId":"193","severity":1,"message":"194","line":299,"column":52,"nodeType":"195","endLine":299,"endColumn":73},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'axios' is defined but never used.","'result' is assigned a value but never used.","jsx-a11y/aria-proptypes","The value for aria-controls must be a list of strings that represent DOM element IDs (idlist)","JSXAttribute","react/jsx-no-duplicate-props","No duplicate props allowed","noDuplicateProps","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'image' is assigned a value but never used.","'ResponsiveContainer' is defined but never used.","no-dupe-keys","Duplicate key 'message'.","ObjectExpression","unexpected","'id' is assigned a value but never used.","'arr' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]